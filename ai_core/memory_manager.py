from langchain.memory import ConversationBufferWindowMemory
from langchain.schema import BaseMessage
from typing import Dict, List

class UXOMemoryManager:
    def __init__(self, k=3):
        self.memories: Dict[str, ConversationBufferWindowMemory] = {}  # L∆∞u tr·ªØ memory cho t·ª´ng session
        self.last_intents: Dict[str, str] = {}  # üîπ L∆∞u intent cu·ªëi c√πng ri√™ng
        self.last_questions: Dict[str, str] = {}   # üîπ NEW: L∆∞u c√¢u h·ªèi cu·ªëi
        self.k = k  # S·ªë l∆∞·ª£ng tin nh·∫Øn l∆∞u trong memory
    
    def get_memory(self, session_id: str) -> ConversationBufferWindowMemory:
        """L·∫•y memory cho session, t·∫°o m·ªõi n·∫øu ch∆∞a c√≥"""
        if session_id not in self.memories: 
            memory = ConversationBufferWindowMemory( 
                k=self.k, return_messages=True, memory_key="chat_history", output_key="output" ) 
            self.memories[session_id] = memory 
        return self.memories[session_id]
    
    def save_context(self, session_id: str, user_input: str, assistant_output: str, intent: str = None):
        """L∆∞u ng·ªØ c·∫£nh h·ªôi tho·∫°i k√®m intent"""
        memory = self.get_memory(session_id)
        memory.save_context(
            {"input": user_input},  # ‚úÖ input format chu·∫©n
            {"output": assistant_output}  # ‚úÖ output format chu·∫©n
        )
        if intent:
            self.last_intents[session_id] = intent
        self.last_questions[session_id] = user_input   # üîπ L∆∞u c√¢u h·ªèi cu·ªëi
        print(f"üíæ Saved context: {user_input[:50]}... -> {assistant_output[:50]}... | intent={intent}")

    def get_chat_history(self, session_id: str) -> str:
        """L·∫•y l·ªãch s·ª≠ chat d·∫°ng text"""
        try:
            memory = self.get_memory(session_id)
            memory_vars = memory.load_memory_variables({})
            chat_history = memory_vars.get("chat_history", [])
            
            if not chat_history:  # ‚úÖ tr√°nh l·ªói khi ch∆∞a c√≥ g√¨
                return ""
            history_text = ""
            for msg in chat_history:
                if hasattr(msg, 'type') and hasattr(msg, 'content'):
                    role = "User" if msg.type == "human" else "Assistant"
                    history_text += f"{role}: {msg.content}\n"
            
            print(f"üìù Chat history for {session_id}: {history_text}")
            return history_text
            
        except Exception as e:
            print(f"‚ùå Error getting chat history: {e}")
            return ""
    
    def clear_memory(self, session_id: str):
        """X√≥a memory c·ªßa session"""
        if session_id in self.memories:
            del self.memories[session_id]
        if session_id in self.last_intents:
            del self.last_intents[session_id]

    def get_messages(self, session_id: str) -> List[BaseMessage]:
        """Tr·∫£ v·ªÅ danh s√°ch message trong session"""
        memory = self.get_memory(session_id)
        return memory.chat_memory.messages  

    def get_last_intent(self, session_id: str) -> str:
        return self.last_intents.get(session_id, "general")
    
    def get_last_question(self, session_id: str) -> str:
        """L·∫•y c√¢u h·ªèi cu·ªëi c√πng c·ªßa user"""
        return self.last_questions.get(session_id, "")
